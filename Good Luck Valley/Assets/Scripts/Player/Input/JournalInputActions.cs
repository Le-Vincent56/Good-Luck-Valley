//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/JournalInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GoodLuckValley.Player.Input
{
    public partial class @JournalInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @JournalInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""JournalInput"",
    ""maps"": [
        {
            ""name"": ""Journal Controls"",
            ""id"": ""b93a517e-0f12-4e56-b2b9-f95f7db34254"",
            ""actions"": [
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""20991082-6bdf-4b21-a198-2b2d9233f497"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Page"",
                    ""type"": ""Button"",
                    ""id"": ""635be07f-4500-4d7f-85c1-43c7c0e299bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Page"",
                    ""type"": ""Button"",
                    ""id"": ""d6bfc783-0180-4c3a-9c46-22e211ce1bd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5db16638-9763-41e1-bd50-ed0113b1fe1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e45ec6b-8078-4068-98d6-20aab969afc1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46e0a0e0-9a0e-4049-9337-efe237a1f7be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27354083-0450-44c5-be15-5b707ff4038a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a94bcc46-d6e6-4250-90a6-a0e67fec82f0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c39be8cc-f175-4892-b47f-24e0e9bb8b19"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Page"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea0ada14-5adc-424e-98a5-8388dc819185"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Journal Controls
            m_JournalControls = asset.FindActionMap("Journal Controls", throwIfNotFound: true);
            m_JournalControls_Back = m_JournalControls.FindAction("Back", throwIfNotFound: true);
            m_JournalControls_NextPage = m_JournalControls.FindAction("Next Page", throwIfNotFound: true);
            m_JournalControls_PreviousPage = m_JournalControls.FindAction("Previous Page", throwIfNotFound: true);
            m_JournalControls_Interact = m_JournalControls.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Journal Controls
        private readonly InputActionMap m_JournalControls;
        private List<IJournalControlsActions> m_JournalControlsActionsCallbackInterfaces = new List<IJournalControlsActions>();
        private readonly InputAction m_JournalControls_Back;
        private readonly InputAction m_JournalControls_NextPage;
        private readonly InputAction m_JournalControls_PreviousPage;
        private readonly InputAction m_JournalControls_Interact;
        public struct JournalControlsActions
        {
            private @JournalInputActions m_Wrapper;
            public JournalControlsActions(@JournalInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Back => m_Wrapper.m_JournalControls_Back;
            public InputAction @NextPage => m_Wrapper.m_JournalControls_NextPage;
            public InputAction @PreviousPage => m_Wrapper.m_JournalControls_PreviousPage;
            public InputAction @Interact => m_Wrapper.m_JournalControls_Interact;
            public InputActionMap Get() { return m_Wrapper.m_JournalControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(JournalControlsActions set) { return set.Get(); }
            public void AddCallbacks(IJournalControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_JournalControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_JournalControlsActionsCallbackInterfaces.Add(instance);
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
                @NextPage.started += instance.OnNextPage;
                @NextPage.performed += instance.OnNextPage;
                @NextPage.canceled += instance.OnNextPage;
                @PreviousPage.started += instance.OnPreviousPage;
                @PreviousPage.performed += instance.OnPreviousPage;
                @PreviousPage.canceled += instance.OnPreviousPage;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }

            private void UnregisterCallbacks(IJournalControlsActions instance)
            {
                @Back.started -= instance.OnBack;
                @Back.performed -= instance.OnBack;
                @Back.canceled -= instance.OnBack;
                @NextPage.started -= instance.OnNextPage;
                @NextPage.performed -= instance.OnNextPage;
                @NextPage.canceled -= instance.OnNextPage;
                @PreviousPage.started -= instance.OnPreviousPage;
                @PreviousPage.performed -= instance.OnPreviousPage;
                @PreviousPage.canceled -= instance.OnPreviousPage;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
            }

            public void RemoveCallbacks(IJournalControlsActions instance)
            {
                if (m_Wrapper.m_JournalControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IJournalControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_JournalControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_JournalControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public JournalControlsActions @JournalControls => new JournalControlsActions(this);
        public interface IJournalControlsActions
        {
            void OnBack(InputAction.CallbackContext context);
            void OnNextPage(InputAction.CallbackContext context);
            void OnPreviousPage(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
