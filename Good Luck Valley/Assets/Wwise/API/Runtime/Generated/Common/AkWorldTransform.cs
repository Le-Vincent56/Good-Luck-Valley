#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

///  Position and orientation of game objects in the world (i.e. supports 64-bit-precision position)

public class AkWorldTransform : global::System.IDisposable {
  private global::System.IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkWorldTransform(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkWorldTransform obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal virtual void setCPtr(global::System.IntPtr cPtr) {
    Dispose();
    swigCPtr = cPtr;
  }

  ~AkWorldTransform() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkUnitySoundEnginePINVOKE.CSharp_delete_AkWorldTransform(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  ///  Get position vector.
  public AkVector64 Position() { return AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_Position(swigCPtr); }

  ///  Get orientation front vector.
  public UnityEngine.Vector3 OrientationFront() { return AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_OrientationFront(swigCPtr); }

  ///  Get orientation top vector.
  public UnityEngine.Vector3 OrientationTop() { return AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_OrientationTop(swigCPtr); }

  ///  Set position and orientation. Orientation front and top should be orthogonal and normalized.
  /// <param name="in_position"> Position vector.</param> 
  /// <param name="in_orientationFront"> Orientation front</param> 
  /// <param name="in_orientationTop"> Orientation top</param>
  public void Set(AkVector64 in_position, UnityEngine.Vector3 in_orientationFront, UnityEngine.Vector3 in_orientationTop) { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_Set__SWIG_0(swigCPtr, in_position, in_orientationFront, in_orientationTop); }

  ///  Set position and orientation. Orientation front and top should be orthogonal and normalized.
  /// <param name="in_positionX"> Position x</param> 
  /// <param name="in_positionY"> Position y</param> 
  /// <param name="in_positionZ"> Position z</param> 
  /// <param name="in_orientFrontX"> Orientation front x</param> 
  /// <param name="in_orientFrontY"> Orientation front y</param> 
  /// <param name="in_orientFrontZ"> Orientation front z</param> 
  /// <param name="in_orientTopX"> Orientation top x</param> 
  /// <param name="in_orientTopY"> Orientation top y</param> 
  /// <param name="in_orientTopZ"> Orientation top z</param>
  public void Set(double in_positionX, double in_positionY, double in_positionZ, float in_orientFrontX, float in_orientFrontY, float in_orientFrontZ, float in_orientTopX, float in_orientTopY, float in_orientTopZ) { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_Set__SWIG_1(swigCPtr, in_positionX, in_positionY, in_positionZ, in_orientFrontX, in_orientFrontY, in_orientFrontZ, in_orientTopX, in_orientTopY, in_orientTopZ); }

  ///  Set position.
  /// <param name="in_position"> Position vector.</param>
  public void SetPosition(AkVector64 in_position) { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_SetPosition__SWIG_0(swigCPtr, in_position); }

  ///  Set position.
  /// <param name="in_x"> x</param> 
  /// <param name="in_y"> y</param> 
  /// <param name="in_z"> z</param>
  public void SetPosition(double in_x, double in_y, double in_z) { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_SetPosition__SWIG_1(swigCPtr, in_x, in_y, in_z); }

  ///  Set orientation. Orientation front and top should be orthogonal and normalized.
  /// <param name="in_orientationFront"> Orientation front</param> 
  /// <param name="in_orientationTop"> Orientation top</param>
  public void SetOrientation(UnityEngine.Vector3 in_orientationFront, UnityEngine.Vector3 in_orientationTop) { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_SetOrientation__SWIG_0(swigCPtr, in_orientationFront, in_orientationTop); }

  ///  Set orientation. Orientation front and top should be orthogonal and normalized.
  /// <param name="in_orientFrontX"> Orientation front x</param> 
  /// <param name="in_orientFrontY"> Orientation front y</param> 
  /// <param name="in_orientFrontZ"> Orientation front z</param> 
  /// <param name="in_orientTopX"> Orientation top x</param> 
  /// <param name="in_orientTopY"> Orientation top y</param> 
  /// <param name="in_orientTopZ"> Orientation top z</param>
  public void SetOrientation(float in_orientFrontX, float in_orientFrontY, float in_orientFrontZ, float in_orientTopX, float in_orientTopY, float in_orientTopZ) { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_SetOrientation__SWIG_1(swigCPtr, in_orientFrontX, in_orientFrontY, in_orientFrontZ, in_orientTopX, in_orientTopY, in_orientTopZ); }

  ///  Orientation of the listener
  public UnityEngine.Vector3 orientationFront { set { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_orientationFront_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_orientationFront_get(swigCPtr); } 
  }

  ///  Top orientation of the listener
  public UnityEngine.Vector3 orientationTop { set { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_orientationTop_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_orientationTop_get(swigCPtr); } 
  }

  ///  Position of the listener
  public AkVector64 position { set { AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_position_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkWorldTransform_position_get(swigCPtr); } 
  }

  public AkWorldTransform() : this(AkUnitySoundEnginePINVOKE.CSharp_new_AkWorldTransform(), true) {
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.