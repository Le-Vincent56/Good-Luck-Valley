#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class AkMIDIEvent : global::System.IDisposable {
  private global::System.IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkMIDIEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkMIDIEvent obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal virtual void setCPtr(global::System.IntPtr cPtr) {
    Dispose();
    swigCPtr = cPtr;
  }

  ~AkMIDIEvent() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkUnitySoundEnginePINVOKE.CSharp_delete_AkMIDIEvent(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public byte byChan { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byChan_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byChan_get(swigCPtr); } 
  }

  public AkMIDIGen Gen { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_Gen_set(swigCPtr, AkMIDIGen.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_Gen_get(swigCPtr);
      AkMIDIGen ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDIGen(cPtr, false);
      return ret;
    } 
  }

  public AkMIDICC Cc { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_Cc_set(swigCPtr, AkMIDICC.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_Cc_get(swigCPtr);
      AkMIDICC ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDICC(cPtr, false);
      return ret;
    } 
  }

  public AkMIDINote NoteOnOff { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_NoteOnOff_set(swigCPtr, AkMIDINote.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_NoteOnOff_get(swigCPtr);
      AkMIDINote ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDINote(cPtr, false);
      return ret;
    } 
  }

  public AkMIDIPitchbend PitchBend { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_PitchBend_set(swigCPtr, AkMIDIPitchbend.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_PitchBend_get(swigCPtr);
      AkMIDIPitchbend ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDIPitchbend(cPtr, false);
      return ret;
    } 
  }

  public AkMIDINoteAftertouch NoteAftertouch { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_NoteAftertouch_set(swigCPtr, AkMIDINoteAftertouch.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_NoteAftertouch_get(swigCPtr);
      AkMIDINoteAftertouch ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDINoteAftertouch(cPtr, false);
      return ret;
    } 
  }

  public AkMIDIChannelAftertouch ChanAftertouch { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_ChanAftertouch_set(swigCPtr, AkMIDIChannelAftertouch.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_ChanAftertouch_get(swigCPtr);
      AkMIDIChannelAftertouch ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDIChannelAftertouch(cPtr, false);
      return ret;
    } 
  }

  public AkMIDIProgramChange ProgramChange { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_ProgramChange_set(swigCPtr, AkMIDIProgramChange.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_ProgramChange_get(swigCPtr);
      AkMIDIProgramChange ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDIProgramChange(cPtr, false);
      return ret;
    } 
  }

  public AkMIDIWwiseCmd WwiseCmd { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_WwiseCmd_set(swigCPtr, AkMIDIWwiseCmd.getCPtr(value)); } 
    get {
      global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_WwiseCmd_get(swigCPtr);
      AkMIDIWwiseCmd ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkMIDIWwiseCmd(cPtr, false);
      return ret;
    } 
  }

  public AkMIDIEventTypes byType { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byType_set(swigCPtr, (int)value); }  get { return (AkMIDIEventTypes)AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byType_get(swigCPtr); } 
  }

  public byte byOnOffNote { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byOnOffNote_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byOnOffNote_get(swigCPtr); } 
  }

  public byte byVelocity { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byVelocity_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byVelocity_get(swigCPtr); } 
  }

  public AkMIDICcTypes byCc { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byCc_set(swigCPtr, (int)value); }  get { return (AkMIDICcTypes)AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byCc_get(swigCPtr); } 
  }

  public byte byCcValue { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byCcValue_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byCcValue_get(swigCPtr); } 
  }

  public byte byValueLsb { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueLsb_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueLsb_get(swigCPtr); } 
  }

  public byte byValueMsb { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueMsb_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byValueMsb_get(swigCPtr); } 
  }

  public byte byAftertouchNote { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byAftertouchNote_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byAftertouchNote_get(swigCPtr); } 
  }

  public byte byNoteAftertouchValue { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byNoteAftertouchValue_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byNoteAftertouchValue_get(swigCPtr); } 
  }

  public byte byChanAftertouchValue { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byChanAftertouchValue_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byChanAftertouchValue_get(swigCPtr); } 
  }

  public byte byProgramNum { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byProgramNum_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_byProgramNum_get(swigCPtr); } 
  }

  public ushort uCmd { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_uCmd_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_uCmd_get(swigCPtr); } 
  }

  public uint uArg { set { AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_uArg_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkMIDIEvent_uArg_get(swigCPtr); } 
  }

  public AkMIDIEvent() : this(AkUnitySoundEnginePINVOKE.CSharp_new_AkMIDIEvent(), true) {
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.