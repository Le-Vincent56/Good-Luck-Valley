#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

///  Specific implementation of array

public class AkPlaylistArray : global::System.IDisposable {
  private global::System.IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkPlaylistArray(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkPlaylistArray obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal virtual void setCPtr(global::System.IntPtr cPtr) {
    Dispose();
    swigCPtr = cPtr;
  }

  ~AkPlaylistArray() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkUnitySoundEnginePINVOKE.CSharp_delete_AkPlaylistArray(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  ///  Constructor
  public AkPlaylistArray() : this(AkUnitySoundEnginePINVOKE.CSharp_new_AkPlaylistArray(), true) {
  }

  ///  Returns the iterator to the first item of the array, will be End() if the array is empty.
  public AkIterator Begin() {
    AkIterator ret = new AkIterator(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Begin(swigCPtr), true);
    return ret;
  }

  ///  Returns the iterator to the end of the array
  public AkIterator End() {
    AkIterator ret = new AkIterator(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_End(swigCPtr), true);
    return ret;
  }

  ///  Returns the iterator th the specified item, will be End() if the item is not found
  public AkIterator FindEx(AkPlaylistItem in_Item) {
    AkIterator ret = new AkIterator(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_FindEx(swigCPtr, AkPlaylistItem.getCPtr(in_Item)), true);
    return ret;
  }

  ///  Erase the specified iterator from the array
  public AkIterator Erase(AkIterator in_rIter) {
    AkIterator ret = new AkIterator(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Erase__SWIG_0(swigCPtr, AkIterator.getCPtr(in_rIter)), true);
    return ret;
  }

  ///  Erase the item at the specified index
  public void Erase(uint in_uIndex) { AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Erase__SWIG_1(swigCPtr, in_uIndex); }

  /// Erase the specified iterator in the array. but it does not guarantee the ordering in the array.
  /// This version should be used only when the order in the array is not an issue.
  public AkIterator EraseSwap(AkIterator in_rIter) {
    AkIterator ret = new AkIterator(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_EraseSwap__SWIG_0(swigCPtr, AkIterator.getCPtr(in_rIter)), true);
    return ret;
  }

  /// Erase the item at the specified index, but it does not guarantee the ordering in the array.
  /// This version should be used only when the order in the array is not an issue.
  public void EraseSwap(uint in_uIndex) { AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_EraseSwap__SWIG_1(swigCPtr, in_uIndex); }

  public bool IsGrowingAllowed() { return AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_IsGrowingAllowed(swigCPtr); }

  ///  Ensure preallocation of a number of items.
  ///  Reserve() won't change the Length() of the array and does nothing if
  ///  in_ulReserve is smaller or equal to current Reserved() size.
  ///  If an allocation occurs, i.e. `in_ulReserve &gt; Reserved()`, all iterators and
  ///  all references to the array elements are invalidated.
  ///
  /// When template parameter `TGrowBy = AkGrowByPolicy_NoGrow`, Reserve() shall
  ///        only be called if the current reserved size is zero.
  ///        It should normally only be called once on init.
  ///
  /// When template parameter `TGrowBy = AkGrowByPolicy_Proportional`, inappropriate
  ///        calls to Reserve(), e.g. calling it before every AddLast(), may increase the
  ///        number of reallocations and result in decreased performance.
  public AKRESULT Reserve(uint in_ulReserve) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Reserve(swigCPtr, in_ulReserve); }

  ///  Ensure preallocation of a number of extra items on top of current array size.
  ///  Same as calling `myArray.Reserve(myArray.Length() + extraItemCount)`.
  /// <seealso cref="Reserve"/>
  public AKRESULT ReserveExtra(uint in_ulReserve) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_ReserveExtra(swigCPtr, in_ulReserve); }

  public uint Reserved() { return AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Reserved(swigCPtr); }

  ///  Term the array. Must be called before destroying the object.
  public void Term() { AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Term(swigCPtr); }

  ///  Returns the numbers of items in the array.
  public uint Length() { return AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Length(swigCPtr); }

  ///  Returns a pointer to the first item in the array.
  public AkPlaylistItem Data() {
    global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Data(swigCPtr);
    AkPlaylistItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkPlaylistItem(cPtr, false);
    return ret;
  }

  ///  Returns true if the number items in the array is 0, false otherwise.
  public bool IsEmpty() { return AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_IsEmpty(swigCPtr); }

  ///  Returns a pointer to the specified item in the list if it exists, 0 if not found.
  public AkPlaylistItem Exists(AkPlaylistItem in_Item) {
    global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Exists(swigCPtr, AkPlaylistItem.getCPtr(in_Item));
    AkPlaylistItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkPlaylistItem(cPtr, false);
    return ret;
  }

  /// Add an item in the array, without filling it.
  /// Returns a pointer to the location to be filled.
  public AkPlaylistItem AddLast() {
    global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_AddLast__SWIG_0(swigCPtr);
    AkPlaylistItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkPlaylistItem(cPtr, false);
    return ret;
  }

  ///  Add an item in the array, and fills it with the provided item.
  public AkPlaylistItem AddLast(AkPlaylistItem in_rItem) {
    global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_AddLast__SWIG_1(swigCPtr, AkPlaylistItem.getCPtr(in_rItem));
    AkPlaylistItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkPlaylistItem(cPtr, false);
    return ret;
  }

  ///  Returns a reference to the last item in the array.
  public AkPlaylistItem Last() {
    AkPlaylistItem ret = new AkPlaylistItem(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Last(swigCPtr), false);
    return ret;
  }

  ///  Removes the last item from the array.
  public void RemoveLast() { AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_RemoveLast(swigCPtr); }

  ///  Removes the specified item if found in the array.
  public AKRESULT Remove(AkPlaylistItem in_rItem) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Remove(swigCPtr, AkPlaylistItem.getCPtr(in_rItem)); }

  /// Fast remove of the specified item in the array.
  /// This method do not guarantee keeping ordering of the array.
  public AKRESULT RemoveSwap(AkPlaylistItem in_rItem) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_RemoveSwap(swigCPtr, AkPlaylistItem.getCPtr(in_rItem)); }

  ///  Removes all items in the array
  public void RemoveAll() { AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_RemoveAll(swigCPtr); }

  ///  Operator [], return a reference to the specified index.
  public AkPlaylistItem ItemAtIndex(uint uiIndex) {
    AkPlaylistItem ret = new AkPlaylistItem(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_ItemAtIndex(swigCPtr, uiIndex), false);
    return ret;
  }

  /// Insert an item at the specified position without filling it.
  /// Success: returns an iterator pointing to the new item.
  /// Failure: returns end iterator.
  public AkIterator Insert(AkIterator in_rIter) {
    AkIterator ret = new AkIterator(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Insert__SWIG_0(swigCPtr, AkIterator.getCPtr(in_rIter)), true);
    return ret;
  }

  /// Insert an item at the specified position without filling it.
  /// Returns the pointer to the item to be filled.
  public AkPlaylistItem Insert(uint in_uIndex) {
    global::System.IntPtr cPtr = AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Insert__SWIG_1(swigCPtr, in_uIndex);
    AkPlaylistItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new AkPlaylistItem(cPtr, false);
    return ret;
  }

  public bool GrowArray() { return AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_GrowArray__SWIG_0(swigCPtr); }

  ///  Resize the array.
  public bool GrowArray(uint in_uGrowBy) { return AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_GrowArray__SWIG_1(swigCPtr, in_uGrowBy); }

  ///  Resize the array to the specified size.
  public bool Resize(uint in_uiSize) { return AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Resize(swigCPtr, in_uiSize); }

  public void Transfer(AkPlaylistArray in_rSource) { AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Transfer(swigCPtr, AkPlaylistArray.getCPtr(in_rSource)); }

  public AKRESULT Copy(AkPlaylistArray in_rSource) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylistArray_Copy(swigCPtr, AkPlaylistArray.getCPtr(in_rSource)); }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.