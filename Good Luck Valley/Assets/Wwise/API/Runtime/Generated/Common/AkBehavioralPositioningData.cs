#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

///  Positioning data inherited from sound structures and mix busses.

public class AkBehavioralPositioningData : global::System.IDisposable {
  private global::System.IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkBehavioralPositioningData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkBehavioralPositioningData obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal virtual void setCPtr(global::System.IntPtr cPtr) {
    Dispose();
    swigCPtr = cPtr;
  }

  ~AkBehavioralPositioningData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkUnitySoundEnginePINVOKE.CSharp_delete_AkBehavioralPositioningData(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AkBehavioralPositioningData() : this(AkUnitySoundEnginePINVOKE.CSharp_new_AkBehavioralPositioningData(), true) {
  }

  ///  Center percentage [0,1]
  public float center { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_center_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_center_get(swigCPtr); } 
  }

  ///  Pan left-right [-1,1]
  public float panLR { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panLR_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panLR_get(swigCPtr); } 
  }

  ///  Pan back-front [-1,1]
  public float panBF { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panBF_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panBF_get(swigCPtr); } 
  }

  ///  Pan down-up [-1,1]
  public float panDU { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panDU_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panDU_get(swigCPtr); } 
  }

  ///  Panning vs 3D spatialization mix ([0,1], 1 being 100% spatialized).
  public float panSpatMix { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panSpatMix_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panSpatMix_get(swigCPtr); } 
  }

  ///  3D spatialization mode.
  public Ak3DSpatializationMode spatMode { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_spatMode_set(swigCPtr, (int)value); }  get { return (Ak3DSpatializationMode)AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_spatMode_get(swigCPtr); } 
  }

  ///  Speaker panning type.
  public AkSpeakerPanningType panType { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panType_set(swigCPtr, (int)value); }  get { return (AkSpeakerPanningType)AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_panType_get(swigCPtr); } 
  }

  ///  When true, audio objects 3D spatialized onto a planar channel configuration will be given a minimum spread value based on their elevation angle, equal to sin(elevation)**2.
  public bool enableHeightSpread { set { AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_enableHeightSpread_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkBehavioralPositioningData_enableHeightSpread_get(swigCPtr); } 
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.