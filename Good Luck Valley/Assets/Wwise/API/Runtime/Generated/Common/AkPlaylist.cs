#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

///  List of items to play in a Dynamic Sequence.
/// <seealso cref="
///  - AK.SoundEngine.DynamicSequence.LockPlaylist
///  - AK.SoundEngine.DynamicSequence.UnlockPlaylist"/>

public class AkPlaylist : AkPlaylistArray {
  private global::System.IntPtr swigCPtr;

  internal AkPlaylist(global::System.IntPtr cPtr, bool cMemoryOwn) : base(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylist_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkPlaylist obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal override void setCPtr(global::System.IntPtr cPtr) {
    base.setCPtr(AkUnitySoundEnginePINVOKE.CSharp_AkPlaylist_SWIGUpcast(cPtr));
    swigCPtr = cPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkUnitySoundEnginePINVOKE.CSharp_delete_AkPlaylist(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose(disposing);
    }
  }

  ///  Enqueue an Audio Node.
  /// <returns>AK_Success if successful, AK_Fail otherwise</returns> 
  /// <param name="in_audioNodeID"> Unique ID of Audio Node</param> 
  /// <param name="in_msDelay"> Delay before playing this item, in milliseconds</param> 
  /// <param name="in_pCustomInfo"> Optional user data</param> 
  /// <param name="in_cExternals"> Optional count of external source structures</param> 
  /// <param name="in_pExternalSources"> Optional array of external source resolution information</param>
  public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, global::System.IntPtr in_pCustomInfo, uint in_cExternals, AkExternalSourceInfoArray in_pExternalSources) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylist_Enqueue__SWIG_0(swigCPtr, in_audioNodeID, in_msDelay, in_pCustomInfo, in_cExternals, in_pExternalSources.GetBuffer()); }

  ///  Enqueue an Audio Node.
  /// <returns>AK_Success if successful, AK_Fail otherwise</returns> 
  /// <param name="in_audioNodeID"> Unique ID of Audio Node</param> 
  /// <param name="in_msDelay"> Delay before playing this item, in milliseconds</param> 
  /// <param name="in_pCustomInfo"> Optional user data</param> 
  /// <param name="in_cExternals"> Optional count of external source structures</param>
  public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, global::System.IntPtr in_pCustomInfo, uint in_cExternals) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylist_Enqueue__SWIG_1(swigCPtr, in_audioNodeID, in_msDelay, in_pCustomInfo, in_cExternals); }

  ///  Enqueue an Audio Node.
  /// <returns>AK_Success if successful, AK_Fail otherwise</returns> 
  /// <param name="in_audioNodeID"> Unique ID of Audio Node</param> 
  /// <param name="in_msDelay"> Delay before playing this item, in milliseconds</param> 
  /// <param name="in_pCustomInfo"> Optional user data</param>
  public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay, global::System.IntPtr in_pCustomInfo) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylist_Enqueue__SWIG_2(swigCPtr, in_audioNodeID, in_msDelay, in_pCustomInfo); }

  ///  Enqueue an Audio Node.
  /// <returns>AK_Success if successful, AK_Fail otherwise</returns> 
  /// <param name="in_audioNodeID"> Unique ID of Audio Node</param> 
  /// <param name="in_msDelay"> Delay before playing this item, in milliseconds</param>
  public AKRESULT Enqueue(uint in_audioNodeID, int in_msDelay) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylist_Enqueue__SWIG_3(swigCPtr, in_audioNodeID, in_msDelay); }

  ///  Enqueue an Audio Node.
  /// <returns>AK_Success if successful, AK_Fail otherwise</returns> 
  /// <param name="in_audioNodeID"> Unique ID of Audio Node</param>
  public AKRESULT Enqueue(uint in_audioNodeID) { return (AKRESULT)AkUnitySoundEnginePINVOKE.CSharp_AkPlaylist_Enqueue__SWIG_4(swigCPtr, in_audioNodeID); }

  public AkPlaylist() : this(AkUnitySoundEnginePINVOKE.CSharp_new_AkPlaylist(), true) {
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.