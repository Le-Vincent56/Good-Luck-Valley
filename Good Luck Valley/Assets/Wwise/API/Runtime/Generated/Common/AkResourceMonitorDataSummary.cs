#if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

///  Resources data summary structure containing general information about the system

public class AkResourceMonitorDataSummary : global::System.IDisposable {
  private global::System.IntPtr swigCPtr;
  protected bool swigCMemOwn;

  internal AkResourceMonitorDataSummary(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  internal static global::System.IntPtr getCPtr(AkResourceMonitorDataSummary obj) {
    return (obj == null) ? global::System.IntPtr.Zero : obj.swigCPtr;
  }

  internal virtual void setCPtr(global::System.IntPtr cPtr) {
    Dispose();
    swigCPtr = cPtr;
  }

  ~AkResourceMonitorDataSummary() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          AkUnitySoundEnginePINVOKE.CSharp_delete_AkResourceMonitorDataSummary(swigCPtr);
        }
        swigCPtr = global::System.IntPtr.Zero;
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  ///  Pourcentage of the cpu time used for processing audio. Please note that the numbers may add up when using multiple threads.
  public float totalCPU { set { AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_totalCPU_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_totalCPU_get(swigCPtr); } 
  }

  ///  Pourcentage of the cpu time used by plugin processing. Please note that the numbers may add up when using multiple threads.
  public float pluginCPU { set { AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_pluginCPU_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_pluginCPU_get(swigCPtr); } 
  }

  ///  Number of active physical voices
  public uint physicalVoices { set { AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_physicalVoices_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_physicalVoices_get(swigCPtr); } 
  }

  ///  Number of active virtual voices
  public uint virtualVoices { set { AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_virtualVoices_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_virtualVoices_get(swigCPtr); } 
  }

  ///  Number of active physical and virtual voices
  public uint totalVoices { set { AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_totalVoices_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_totalVoices_get(swigCPtr); } 
  }

  ///  Number of events triggered at a certain time
  public uint nbActiveEvents { set { AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_nbActiveEvents_set(swigCPtr, value); }  get { return AkUnitySoundEnginePINVOKE.CSharp_AkResourceMonitorDataSummary_nbActiveEvents_get(swigCPtr); } 
  }

  public AkResourceMonitorDataSummary() : this(AkUnitySoundEnginePINVOKE.CSharp_new_AkResourceMonitorDataSummary(), true) {
  }

}
#endif // #if ! (UNITY_DASHBOARD_WIDGET || UNITY_WEBPLAYER || UNITY_WII || UNITY_WIIU || UNITY_NACL || UNITY_FLASH || UNITY_BLACKBERRY) // Disable under unsupported platforms.